using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore;
using OnlineRetailStoreV01.Models;
using System.Net;

namespace OnlineRetailStoreV01
{
    public class FileName
    {
    }

}
using System.Linq;
using System.Web.Mvc;
using System.Web.Security;
using OnlineRetailStoreV01.Models;

namespace OnlineRetailStoreV01.Controllers
{
    public class AccountController : Controller
    {
        private ApplicationDbContext db = new ApplicationDbContext();

        // GET: /Account/Login
        public ActionResult Login()
        {
            return View();
        }

        // POST: /Account/Login
        [HttpPost]
        [ValidateAntiForgeryToken]
        public ActionResult Login(UserLoginViewModel model)
        {
            if (ModelState.IsValid)
            {
                var user = db.Users.FirstOrDefault(u => u.Email == model.Email && u.Password == model.Password);
                if (user != null)
                {
                    FormsAuthentication.SetAuthCookie(user.UserId.ToString(), false);
                    //HttpContext.Session.SetString("userEmail", model.Email);

                    // Redirect based on user type
                    switch (user.UserType)
                    {
                        case UserType.Admin:
                            return RedirectToAction("AdminView", "Admin");
                        case UserType.Customer:
                            return RedirectToAction("CustomerView", "Customer");
                        case UserType.Courier:
                            return RedirectToAction("CourierView", "Courier");
                        case UserType.Vendor:
                            return RedirectToAction("VendorView", "Vendor");
                        default:
                            ModelState.AddModelError("", "Invalid user type.");
                            return View(model);
                    }
                }
                else
                {
                    ModelState.AddModelError("", "Invalid username or password.");
                }
            }
            return View(model);
        }

        // GET: /Account/Register
        public ActionResult Register()
        {
            return View();
        }

        // POST: /Account/Register
        [HttpPost]
        [ValidateAntiForgeryToken]
        public ActionResult Register(UserRegisterViewModel model)
        {
            if (ModelState.IsValid)
            {
                // Create new user
                var user = new User
                {
                    FullName = model.FullName,
                    Email = model.Email,
                    Password = model.Password,
                    UserType = model.UserType
                };

                // Add user to database
                db.Users.Add(user);
                db.SaveChanges();

                // Redirect to login page
                return RedirectToAction("Login");
            }
            return View(model);
        }

        // GET: /Account/Logout
        public ActionResult Logout()
        {
            FormsAuthentication.SignOut();
            return RedirectToAction("Login", "Account");
        }
    }
}

using System;
using System.Linq;
using System.Web.Mvc;
using OnlineRetailStoreV01.Models;

namespace OnlineRetailStoreV01.Controllers
{
    public class CartController : Controller
    {
        private ApplicationDbContext db = new ApplicationDbContext();

        [Authorize(Roles = "Customer")]
        public ActionResult Index()
        {
            // Retrieve the user's cart items
            var userId = (int)Session["UserId"];
            var cartItems = db.CartItems.Where(c => c.UserId == userId).ToList();
            return View(cartItems);
        }

        [HttpPost]
        [ValidateAntiForgeryToken]
        public ActionResult AddToCart(int productId, int quantity)
        {
            // Add the specified quantity of the product to the user's cart
            var userId = (int)Session["UserId"];
            var existingCartItem = db.CartItems.FirstOrDefault(c => c.UserId == userId && c.ProductId == productId);

            if (existingCartItem != null)
            {
                existingCartItem.Quantity += quantity;
            }
            else
            {
                db.CartItems.Add(new CartItem { UserId = userId, ProductId = productId, Quantity = quantity });
            }

            db.SaveChanges();

            return RedirectToAction("Index");
        }

        [HttpPost]
        [ValidateAntiForgeryToken]
        public ActionResult RemoveFromCart(int id)
        {
            // Remove a product from the user's cart
            var cartItem = db.CartItems.Find(id);
            db.CartItems.Remove(cartItem);
            db.SaveChanges();
            return RedirectToAction("Index");
        }

        [HttpPost]
        [ValidateAntiForgeryToken]
        public ActionResult PlaceOrder()
        {
            // Place an order for the user
            var userId = (int)Session["UserId"];
            var cartItems = db.CartItems.Where(c => c.UserId == userId).ToList();

            var order = new Order
            {
                UserId = userId,
                OrderDate = DateTime.Now,
                Items = cartItems
            };

            db.Orders.Add(order);

            foreach (var item in cartItems)
            {
                item.OrderId = order.Id;

                // Decrease the product quantity in the database
                var product = db.Products.Find(item.ProductId);
                if (product != null)
                {
                    product.Quantity -= item.Quantity;
                }
            }

            db.SaveChanges();

            // Clear the user's cart
            db.CartItems.RemoveRange(cartItems);
            db.SaveChanges();

            return RedirectToAction("Index", "Order");
        }
    }
}



using System.Linq;
using System.Web.Mvc;
using OnlineRetailStoreV01.Models;

namespace OnlineRetailStoreV01.Controllers
{
    public class OrderController : Controller
    {
        private ApplicationDbContext db = new ApplicationDbContext();

        [Authorize(Roles = "Customer")]
        public ActionResult Index()
        {
            // Retrieve the user's orders
            var userId = (int)Session["UserId"];
            var orders = db.Orders.Where(o => o.UserId == userId).ToList();
            return View(orders);
        }

        public ActionResult Details(int id)
        {
            // View details of a specific order
            var order = db.Orders.Find(id);
            return View(order);
        }
    }
}


using System.Linq;
using System.Web.Mvc;
using OnlineRetailStoreV01.Models;

namespace OnlineRetailStoreV01.Controllers
{
    public class CourierController : Controller
    {
        private ApplicationDbContext db = new ApplicationDbContext();

        [Authorize(Roles = "Courier")]
        public ActionResult Index()
        {
            // Retrieve orders assigned to the courier
            var courierId = (int)Session["UserId"];
            var orders = db.Orders.Where(o => o.CourierId == courierId).ToList();
            return View(orders);
        }

        [Authorize(Roles = "Courier")]
        public ActionResult UpdateStatus(int id, OrderStatus status)
        {
            // Update the status of the order
            var order = db.Orders.Find(id);
            if (order != null)
            {
                order.Status = status;
                db.SaveChanges();
            }
            return RedirectToAction("Index");
        }
    }
}



using System;
using System.Collections.Generic;

namespace OnlineRetailStoreV01.Models
{
    public enum OrderStatus
    {
        Pending,
        InProgress,
        Delivered,
        Cancelled
    }

    public class Order
    {
        public int Id { get; set; }
        public int UserId { get; set; }
        public DateTime OrderDate { get; set; }
        public int CourierId { get; set; }
        public OrderStatus Status { get; set; }
        public virtual ICollection<CartItem> Items { get; set; }
    }
}


using System.Data.Entity;
using System.Linq;
using System.Net;
using System.Web.Mvc;
using OnlineRetailStoreV01.Models;

namespace OnlineRetailStoreV01.Controllers
{
    public class ProductController : Controller
    {
        private ApplicationDbContext db = new ApplicationDbContext();

        [Authorize(Roles = "Vendor")]
        public ActionResult Index()
        {
            var vendorId = (int)Session["UserId"];
            var products = db.Products.Where(p => p.VendorId == vendorId).ToList();
            return View(products);
        }

        [Authorize(Roles = "Vendor")]
        public ActionResult Create()
        {
            return View();
        }

        [HttpPost]
        [ValidateAntiForgeryToken]
        public ActionResult Create(Product product)
        {
            if (ModelState.IsValid)
            {
                var vendorId = (int)Session["UserId"];
                product.VendorId = vendorId;
                db.Products.Add(product);
                db.SaveChanges();
                return RedirectToAction("Index");
            }
            return View(product);
        }

        [Authorize(Roles = "Vendor")]
        public ActionResult Edit(int? id)
        {
            if (id == null)
            {
                return new HttpStatusCodeResult(HttpStatusCode.BadRequest);
            }
            var product = db.Products.Find(id);
            if (product == null)
            {
                return HttpNotFound();
            }
            return View(product);
        }

        [HttpPost]
        [ValidateAntiForgeryToken]
        public ActionResult Edit(Product product)
        {
            if (ModelState.IsValid)
            {
                db.Entry(product).State = EntityState.Modified;
                db.SaveChanges();
                return RedirectToAction("Index");
            }
            return View(product);
        }

        [Authorize(Roles = "Vendor")]
        public ActionResult Delete(int? id)
        {
            if (id == null)
            {
                return new HttpStatusCodeResult(HttpStatusCode.BadRequest);
            }
            var product = db.Products.Find(id);
            if (product == null)
            {
                return HttpNotFound();
            }
            return View(product);
        }

        [HttpPost, ActionName("Delete")]
        [ValidateAntiForgeryToken]
        public ActionResult DeleteConfirmed(int id)
        {
            var product = db.Products.Find(id);
            db.Products.Remove(product);
            db.SaveChanges();
            return RedirectToAction("Index");
        }
    }
}



namespace OnlineRetailStoreV01.Models
{
    public class Product
    {
        public int Id { get; set; }
        public string Name { get; set; }
        public decimal Price { get; set; }
        public int Quantity { get; set; }
        public int VendorId { get; set; }
        public virtual Vendor Vendor { get; set; }
    }
}



[HttpPost]
[ValidateAntiForgeryToken]
public ActionResult PlaceOrder()
{
    var userId = (int)Session["UserId"];
    var cartItems = db.CartItems.Where(c => c.UserId == userId).ToList();

    var order = new Order
    {
        UserId = userId,
        OrderDate = DateTime.Now,
        Items = cartItems
    };

    db.Orders.Add(order);

    foreach (var item in cartItems)
    {
        item.OrderId = order.Id;

        // Decrease the product quantity in the database
        var product = db.Products.Find(item.ProductId);
        if (product != null)
        {
            product.Quantity -= item.Quantity;
        }
    }

    db.SaveChanges();

    // Clear the user's cart
    db.CartItems.RemoveRange(cartItems);
    db.SaveChanges();

    return RedirectToAction("Index", "Order");
}



using System.Linq;
using System.Web.Mvc;
using OnlineRetailStoreV01.Models;

namespace OnlineRetailStoreV01.Controllers
{
    public class AdminController : Controller
    {
        private ApplicationDbContext db = new ApplicationDbContext();

        [Authorize(Roles = "Admin")]
        public ActionResult Index()
        {
            return View();
        }

        [Authorize(Roles = "Admin")]
        public ActionResult ManageVendors()
        {
            var vendors = db.Vendors.ToList();
            return View(vendors);
        }

        [Authorize(Roles = "Admin")]
        public ActionResult ManageCouriers()
        {
            var couriers = db.Couriers.ToList();
            return View(couriers);
        }

        [Authorize(Roles = "Admin")]
        public ActionResult ManageProducts()
        {
            var products = db.Products.ToList();
            return View(products);
        }

        [Authorize(Roles = "Admin")]
        public ActionResult ApproveVendor(int id)
        {
            var vendor = db.Vendors.Find(id);
            if (vendor != null)
            {
                vendor.IsApproved = true;
                db.SaveChanges();
            }
            return RedirectToAction("ManageVendors");
        }

        [Authorize(Roles = "Admin")]
        public ActionResult ApproveCourier(int id)
        {
            var courier = db.Couriers.Find(id);
            if (courier != null)
            {
                courier.IsApproved = true;
                db.SaveChanges();
            }
            return RedirectToAction("ManageCouriers");
        }
    }
}

[HttpPost]
[ValidateAntiForgeryToken]
public ActionResult PlaceOrder()
{
    var userId = (int)Session["UserId"];
    var cartItems = db.CartItems.Where(c => c.UserId == userId).ToList();

    var order = new Order
    {
        UserId = userId,
        OrderDate = DateTime.Now,
        Items = cartItems
    };

    db.Orders.Add(order);

    foreach (var item in cartItems)
    {
        item.OrderId = order.Id;

        // Decrease the product quantity in the database
        var product = db.Products.Find(item.ProductId);
        if (product != null)
        {
            product.Quantity -= item.Quantity;
        }
    }

    db.SaveChanges();

    // Clear the user's cart
    db.CartItems.RemoveRange(cartItems);
    db.SaveChanges();

    return RedirectToAction("Index", "Order");
}

////////////////////////////////////////////////////////
/*
//login 
using Microsoft.AspNetCore.Mvc;
using OnlineRetailStoreV01.Models;
using System.Linq;

namespace OnlineRetailStoreV01.Controllers
{
    public class AccountController : Controller
    {
        private readonly ApplicationDbContext _context;

        public AccountController(ApplicationDbContext context)
        {
            _context = context;
        }

        // GET: /Account/Login
        public IActionResult Login()
        {
            return View();
        }

        // POST: /Account/Login
        [HttpPost]
        [ValidateAntiForgeryToken]
        public IActionResult Login(UserLoginViewModel model)
        {
            if (ModelState.IsValid)
            {
                var user = _context.Users.FirstOrDefault(u => u.Email == model.Email && u.Password == model.Password);
                if (user != null)
                {
                    // Redirect logic based on user type
                    // Implement the redirection logic based on the user type
                }
                else
                {
                    ModelState.AddModelError("", "Invalid username or password.");
                    return View(model);
                }
            }
            return View(model);
        }

        // GET: /Account/Register
        public IActionResult Register()
        {
            return View();
        }

        // POST: /Account/Register
        [HttpPost]
        [ValidateAntiForgeryToken]
        public IActionResult Register(UserRegisterViewModel model)
        {
            if (ModelState.IsValid)
            {
                var user = new User
                {
                    FullName = model.FullName,
                    Email = model.Email,
                    Password = model.Password,
                    UserType = model.UserType
                };

                _context.Users.Add(user);
                _context.SaveChanges();

                return RedirectToAction("Login");
            }
            return View(model);
        }

        // GET: /Account/Logout
        public IActionResult Logout()
        {
            // Implement logout logic as required
            return RedirectToAction("Login");
        }
    }
}


//cart controller
using Microsoft.AspNetCore.Mvc;
using OnlineRetailStoreV01.Models;
using System;
using System.Linq;

namespace OnlineRetailStoreV01.Controllers
{
    public class CartController : Controller
    {
        private readonly ApplicationDbContext _context;

        public CartController(ApplicationDbContext context)
        {
            _context = context;
        }

        [Authorize(Roles = "Customer")]
        public IActionResult Index()
        {
            var userId = GetCurrentUserId();
            var cartItems = _context.CartItems.Where(c => c.UserId == userId).ToList();
            return View(cartItems);
        }

        [HttpPost]
        [ValidateAntiForgeryToken]
        public IActionResult AddToCart(int productId, int quantity)
        {
            var userId = GetCurrentUserId();
            var existingCartItem = _context.CartItems.FirstOrDefault(c => c.UserId == userId && c.ProductId == productId);

            if (existingCartItem != null)
            {
                existingCartItem.Quantity += quantity;
            }
            else
            {
                _context.CartItems.Add(new CartItem { UserId = userId, ProductId = productId, Quantity = quantity });
            }

            _context.SaveChanges();

            return RedirectToAction("Index");
        }

        [HttpPost]
        [ValidateAntiForgeryToken]
        public IActionResult RemoveFromCart(int id)
        {
            var cartItem = _context.CartItems.Find(id);
            _context.CartItems.Remove(cartItem);
            _context.SaveChanges();
            return RedirectToAction("Index");
        }

        [HttpPost]
        [ValidateAntiForgeryToken]
        public IActionResult PlaceOrder()
        {
            var userId = GetCurrentUserId();
            var cartItems = _context.CartItems.Where(c => c.UserId == userId).ToList();

            var order = new Order
            {
                UserId = userId,
                OrderDate = DateTime.Now,
                Items = cartItems
            };

            _context.Orders.Add(order);

            foreach (var item in cartItems)
            {
                item.OrderId = order.Id;

                var product = _context.Products.Find(item.ProductId);
                if (product != null)
                {
                    product.Quantity -= item.Quantity;
                }
            }

            _context.SaveChanges();

            _context.CartItems.RemoveRange(cartItems);
            _context.SaveChanges();

            return RedirectToAction("Index", "Order");
        }

        private int GetCurrentUserId()
        {
            // Implement logic to get the current user's ID
        }
    }
}

//order controller
using Microsoft.AspNetCore.Mvc;
using OnlineRetailStoreV01.Models;
using System;
using System.Linq;

namespace OnlineRetailStoreV01.Controllers
{
    public class OrderController : Controller
    {
        private readonly ApplicationDbContext _context;

        public OrderController(ApplicationDbContext context)
        {
            _context = context;
        }

        [Authorize(Roles = "Customer")]
        public IActionResult Index()
        {
            var userId = GetCurrentUserId();
            var orders = _context.Orders.Where(o => o.UserId == userId).ToList();
            return View(orders);
        }

        public IActionResult Details(int id)
        {
            var order = _context.Orders.Find(id);
            return View(order);
        }

        private int GetCurrentUserId()
        {
            // Implement logic to get the current user's ID
        }
    }
}

//courier controller
using Microsoft.AspNetCore.Mvc;
using OnlineRetailStoreV01.Models;
using System;
using System.Linq;

namespace OnlineRetailStoreV01.Controllers
{
    public class CourierController : Controller
    {
        private readonly ApplicationDbContext _context;

        public CourierController(ApplicationDbContext context)
        {
            _context = context;
        }

        [Authorize(Roles = "Courier")]
        public IActionResult Index()
        {
            var courierId = GetCurrentCourierId();
            var orders = _context.Orders.Where(o => o.CourierId == courierId).ToList();
            return View(orders);
        }

        [Authorize(Roles = "Courier")]
        public IActionResult UpdateStatus(int id, OrderStatus status)
        {
            var order = _context.Orders.Find(id);
            if (order != null)
            {
                order.Status = status;
                _context.SaveChanges();
            }
            return RedirectToAction("Index");
        }

        private int GetCurrentCourierId()
        {
            // Implement logic to get the current courier's ID
        }
    }
}

//product controller
using Microsoft.AspNetCore.Mvc;
using OnlineRetailStoreV01.Models;
using System;
using System.Linq;

namespace OnlineRetailStoreV01.Controllers
{
    public class ProductController : Controller
    {
        private readonly ApplicationDbContext _context;

        public ProductController(ApplicationDbContext context)
        {
            _context = context;
        }

        [Authorize(Roles = "Vendor")]
        public IActionResult Index()
        {
            var vendorId = GetCurrentVendorId();
            var products = _context.Products.Where(p => p.VendorId == vendorId).ToList();
            return View(products);
        }

        [Authorize(Roles = "Vendor")]
        public IActionResult Create()
        {
            return View();
        }

        [HttpPost]
        [ValidateAntiForgeryToken]
        public IActionResult Create(Product product)
        {
            if (ModelState.IsValid)
            {
                var vendorId = GetCurrentVendorId();
                product.VendorId = vendorId;
                _context.Products.Add(product);
                _context.SaveChanges();
                return RedirectToAction("Index");
            }
            return View(product);
        }

        [Authorize(Roles = "Vendor")]
        public IActionResult Edit(int? id)
        {
            if (id == null)
            {
                return BadRequest();
            }
            var product = _context.Products.Find(id);
            if (product == null)
            {
                return NotFound();
            }
            return View(product);
        }

        [HttpPost]
        [ValidateAntiForgeryToken]
        public IActionResult Edit(Product product)
        {
            if (ModelState.IsValid)
            {
                _context.Products.Update(product);
                _context.SaveChanges();
                return RedirectToAction("Index");
            }
            return View(product);
        }

        [Authorize(Roles = "Vendor")]
        public IActionResult Delete(int? id)
        {
            if (id == null)
            {
                return BadRequest();
            }
            var product = _context.Products.Find(id);
            if (product == null)
            {
                return NotFound();
            }
            return View(product);
        }

        [HttpPost, ActionName("Delete")]
        [ValidateAntiForgeryToken]
        public IActionResult DeleteConfirmed(int id)
        {
            var product = _context.Products.Find(id);
            _context.Products.Remove(product);
            _context.SaveChanges();
            return RedirectToAction("Index");
        }

        private int GetCurrentVendorId()
{
    var vendorIdClaim = User.Claims.FirstOrDefault(c => c.Type == "VendorId");
    if (vendorIdClaim != null && int.TryParse(vendorIdClaim.Value, out int vendorId))
    {
        return vendorId;
    }
    // If vendor ID not found or invalid, handle accordingly (e.g., redirect to an error page)
    return -1; // Default value or error handling
}

    }
}


//
private int GetCurrentUserId()
{
    var userIdClaim = User.Claims.FirstOrDefault(c => c.Type == "UserId");
    if (userIdClaim != null && int.TryParse(userIdClaim.Value, out int userId))
    {
        return userId;
    }
    // If user ID not found or invalid, handle accordingly (e.g., redirect to an error page)
    return -1; // Default value or error handling
}

//private int GetCurrentCourierId()
{
    var courierIdClaim = User.Claims.FirstOrDefault(c => c.Type == "CourierId");
    if (courierIdClaim != null && int.TryParse(courierIdClaim.Value, out int courierId))
    {
        return courierId;
    }
    // If courier ID not found or invalid, handle accordingly (e.g., redirect to an error page)
    return -1; // Default value or error handling
}



//Sure, I'll provide an example of registration along with authentication. Here's the complete code with registration and authentication for four types of users (admin, vendor, courier, and customer):

```csharp
using Microsoft.AspNetCore.Mvc;
using Microsoft.IdentityModel.Tokens;
using System;
using System.IdentityModel.Tokens.Jwt;
using System.Security.Claims;
using System.Text;
using System.Collections.Generic;

public class AuthController : ControllerBase
{
    private readonly IUserService _userService; // Assuming you have a service to handle user-related operations

    public AuthController(IUserService userService)
    {
        _userService = userService;
    }

    [AllowAnonymous]
    [HttpPost("login")]
    public IActionResult Login(string email, string password)
    {
        var user = _userService.Authenticate(email, password); // Implement this method to authenticate the user

        if (user == null)
            return Unauthorized();

        var token = GenerateJwtToken(user.UserId, user.UserType.ToString());
        return Ok(new { token });
    }

    [AllowAnonymous]
    [HttpPost("register")]
    public IActionResult Register(UserRegisterViewModel model)
    {
        if (!ModelState.IsValid)
            return BadRequest(ModelState);

        // Map UserRegisterViewModel to User entity
        var user = new User
        {
            FullName = model.FullName,
            Email = model.Email,
            Password = model.Password,
            UserType = model.UserType
        };

        // Add user to database
        try
        {
            _userService.AddUser(user);
            return Ok(new { message = "User registered successfully" });
        }
        catch (Exception ex)
        {
            return BadRequest(new { message = "Failed to register user", error = ex.Message });
        }
    }

    private string GenerateJwtToken(int userId, string role)
    {
        var tokenHandler = new JwtSecurityTokenHandler();
        var key = GetTokenKeyForRole(role);
        var tokenDescriptor = new SecurityTokenDescriptor
        {
            Subject = new ClaimsIdentity(new Claim[]
            {
                new Claim(ClaimTypes.NameIdentifier, userId.ToString()),
                new Claim(ClaimTypes.Role, role)
            }),
            Expires = DateTime.UtcNow.AddDays(1),
            SigningCredentials = new SigningCredentials(new SymmetricSecurityKey(key), SecurityAlgorithms.HmacSha256Signature)
        };
        var token = tokenHandler.CreateToken(tokenDescriptor);
        return tokenHandler.WriteToken(token);
    }

    private byte[] GetTokenKeyForRole(string role)
    {
        switch (role)
        {
            case "Admin":
                return Encoding.ASCII.GetBytes("admin-secret-key");
            case "Vendor":
                return Encoding.ASCII.GetBytes("vendor-secret-key");
            case "Courier":
                return Encoding.ASCII.GetBytes("courier-secret-key");
            case "Customer":
                return Encoding.ASCII.GetBytes("customer-secret-key");
            default:
                throw new ArgumentException("Invalid role");
        }
    }
}

public class UserRegisterViewModel
{
    public string FullName { get; set; }
    public string Email { get; set; }
    public string Password { get; set; }
    public UserType UserType { get; set; }
}

public class User
{
    public int UserId { get; set; }
    public string FullName { get; set; }
    public string Email { get; set; }
    public string Password { get; set; }
    public UserType UserType { get; set; }
}

public enum UserType
{
    Admin,
    Vendor,
    Courier,
    Customer
}

public interface IUserService
{
    User Authenticate(string email, string password);
    void AddUser(User user);
}
```

This code provides endpoints for both user registration (`Register`) and authentication (`Login`). Adjust the implementation of the `IUserService` interface and its concrete implementation (`UserService`) to interact with your data store for user authentication and registration.

Ensure that you properly hash passwords before storing them in the database and handle errors appropriately. Also, make sure to secure your secret keys and never expose them publicly.


//Got it! Since you're not using ASP.NET Core Identity and only relying on JWT for authentication, you'll need to implement a custom solution for user authentication, role management, and JWT token generation.

Here's how you can modify the code to support JWT-based authentication with custom role management:

1. **Program.cs:**
   ```csharp
   using Microsoft.AspNetCore.Authentication.JwtBearer;
   using Microsoft.IdentityModel.Tokens;
   using YourNamespace.Services;

   var builder = WebApplication.CreateBuilder(args);

   builder.Services.AddScoped<IUserService, UserService>();

   builder.Services.AddAuthentication(JwtBearerDefaults.AuthenticationScheme)
       .AddJwtBearer(options =>
       {
           options.TokenValidationParameters = new TokenValidationParameters
           {
               ValidateIssuer = false,
               ValidateAudience = false,
               ValidateLifetime = true,
               ValidateIssuerSigningKey = true,
               IssuerSigningKey = new SymmetricSecurityKey(Encoding.ASCII.GetBytes(builder.Configuration["Jwt:Key"]))
           };
       });

   builder.Services.AddAuthorization();

   builder.Services.AddControllersWithViews();

   var app = builder.Build();

   // Configure the HTTP request pipeline.
   if (!app.Environment.IsDevelopment())
   {
       app.UseExceptionHandler("/Home/Error");
       app.UseHsts();
   }

   app.UseHttpsRedirection();
   app.UseStaticFiles();

   app.UseAuthentication();
   app.UseAuthorization();

   app.MapControllerRoute(
       name: "default",
       pattern: "{controller=Home}/{action=Index}/{id?}");

   app.Run();
   ```

2. **appsettings.json:**
   Ensure you have the JWT key configured in the `appsettings.json` file:
   ```json
   {
     "Jwt": {
       "Key": "your_secret_key_here"
     }
   }
   ```

3. **UserService.cs:**
   Implement the user service to handle user authentication, registration, and role management.

4. **UserController.cs:**
   Implement the user controller to handle user registration and authentication endpoints.

5. **JwtService.cs:**
   Implement a service to generate JWT tokens with roles embedded in them.

With these modifications, your ASP.NET Core 6 application will support JWT-based authentication with custom role management. Make sure to implement the user service, user controller, JWT service, and database models according to your application's requirements.


*/
/*

Sure, I'll provide an example of registration along with authentication. Here's the complete code with registration and authentication for four types of users (admin, vendor, courier, and customer):

```csharp
using Microsoft.AspNetCore.Mvc;
using Microsoft.IdentityModel.Tokens;
using System;
using System.IdentityModel.Tokens.Jwt;
using System.Security.Claims;
using System.Text;
using System.Collections.Generic;

public class AuthController : ControllerBase
{
    private readonly IUserService _userService; // Assuming you have a service to handle user-related operations

    public AuthController(IUserService userService)
    {
        _userService = userService;
    }

    [AllowAnonymous]
    [HttpPost("login")]
    public IActionResult Login(string email, string password)
    {
        var user = _userService.Authenticate(email, password); // Implement this method to authenticate the user

        if (user == null)
            return Unauthorized();

        var token = GenerateJwtToken(user.UserId, user.UserType.ToString());
        return Ok(new { token });
    }

    [AllowAnonymous]
    [HttpPost("register")]
    public IActionResult Register(UserRegisterViewModel model)
    {
        if (!ModelState.IsValid)
            return BadRequest(ModelState);

        // Map UserRegisterViewModel to User entity
        var user = new User
        {
            FullName = model.FullName,
            Email = model.Email,
            Password = model.Password,
            UserType = model.UserType
        };

        // Add user to database
        try
        {
            _userService.AddUser(user);
            return Ok(new { message = "User registered successfully" });
        }
        catch (Exception ex)
        {
            return BadRequest(new { message = "Failed to register user", error = ex.Message });
        }
    }

    private string GenerateJwtToken(int userId, string role)
    {
        var tokenHandler = new JwtSecurityTokenHandler();
        var key = GetTokenKeyForRole(role);
        var tokenDescriptor = new SecurityTokenDescriptor
        {
            Subject = new ClaimsIdentity(new Claim[]
            {
                new Claim(ClaimTypes.NameIdentifier, userId.ToString()),
                new Claim(ClaimTypes.Role, role)
            }),
            Expires = DateTime.UtcNow.AddDays(1),
            SigningCredentials = new SigningCredentials(new SymmetricSecurityKey(key), SecurityAlgorithms.HmacSha256Signature)
        };
        var token = tokenHandler.CreateToken(tokenDescriptor);
        return tokenHandler.WriteToken(token);
    }

    private byte[] GetTokenKeyForRole(string role)
    {
        switch (role)
        {
            case "Admin":
                return Encoding.ASCII.GetBytes("admin-secret-key");
            case "Vendor":
                return Encoding.ASCII.GetBytes("vendor-secret-key");
            case "Courier":
                return Encoding.ASCII.GetBytes("courier-secret-key");
            case "Customer":
                return Encoding.ASCII.GetBytes("customer-secret-key");
            default:
                throw new ArgumentException("Invalid role");
        }
    }
}

public class UserRegisterViewModel
{
    public string FullName { get; set; }
    public string Email { get; set; }
    public string Password { get; set; }
    public UserType UserType { get; set; }
}

public class User
{
    public int UserId { get; set; }
    public string FullName { get; set; }
    public string Email { get; set; }
    public string Password { get; set; }
    public UserType UserType { get; set; }
}

public enum UserType
{
    Admin,
    Vendor,
    Courier,
    Customer
}

public interface IUserService
{
    User Authenticate(string email, string password);
    void AddUser(User user);
}
```

This code provides endpoints for both user registration (`Register`) and authentication (`Login`). Adjust the implementation of the `IUserService` interface and its concrete implementation (`UserService`) to interact with your data store for user authentication and registration.

Ensure that you properly hash passwords before storing them in the database and handle errors appropriately. Also, make sure to secure your secret keys and never expose them publicly.
*/

/*
Certainly! Below is the complete implementation of authentication, registration, and logout logic in the `AuthService` class.

```csharp
using System;
using System.Collections.Generic;
using System.Linq;
using System.Security.Claims;
using System.Text;
using System.Threading.Tasks;
using Microsoft.IdentityModel.Tokens;
using System.IdentityModel.Tokens.Jwt;
using OnlineRetailStoreV01.Models;

public interface IAuthService
{
    Task<string> AuthenticateAsync(string email, string password);
    Task<bool> RegisterAsync(User user);
    Task LogoutAsync();
}

public class AuthService : IAuthService
{
    private readonly List<User> _users;
    private readonly string _secretKey;

    public AuthService(string secretKey)
    {
        _users = new List<User>();
        _secretKey = secretKey;
    }

    public async Task<string> AuthenticateAsync(string email, string password)
    {
        var user = _users.FirstOrDefault(u => u.Email == email && u.Password == password);

        if (user == null)
            return null; // Authentication failed

        // Create token
        var token = GenerateJwtToken(user);

        return token;
    }

    public async Task<bool> RegisterAsync(User user)
    {
        // Check if the email is already registered
        if (_users.Any(u => u.Email == user.Email))
            return false; // Registration failed

        // Add the new user
        _users.Add(user);
        return true; // Registration successful
    }

    public async Task LogoutAsync()
    {
        // Perform logout actions if any (not applicable in this simple example)
    }

    private string GenerateJwtToken(User user)
    {
        var tokenHandler = new JwtSecurityTokenHandler();
        var key = Encoding.ASCII.GetBytes(_secretKey);

        var tokenDescriptor = new SecurityTokenDescriptor
        {
            Subject = new ClaimsIdentity(new Claim[]
            {
                new Claim(ClaimTypes.NameIdentifier, user.Id.ToString()),
                new Claim(ClaimTypes.Email, user.Email),
                new Claim(ClaimTypes.Role, user.Role.ToString())
            }),
            Expires = DateTime.UtcNow.AddDays(7),
            SigningCredentials = new SigningCredentials(new SymmetricSecurityKey(key), SecurityAlgorithms.HmacSha256Signature)
        };

        var token = tokenHandler.CreateToken(tokenDescriptor);
        return tokenHandler.WriteToken(token);
    }
}
```

In this implementation:

- The `AuthService` class implements the `IAuthService` interface.
- It contains methods for authentication, registration, and logout.
- The `AuthenticateAsync` method checks if the provided email and password match any user in the list. If a match is found, it generates a JWT token using the `GenerateJwtToken` method.
- The `RegisterAsync` method checks if the email is already registered and adds the new user if it's not already registered.
- The `LogoutAsync` method performs logout actions if any. However, in this simple example, it does nothing.
- The `GenerateJwtToken` method creates a JWT token with claims such as the user's ID, email, and role, and signs it using the provided secret key.

Make sure to configure the secret key appropriately and inject the `AuthService` into your controllers to use these authentication, registration, and logout methods. Additionally, adjust the `User` model according to your application's requirements.


Certainly! Let's implement the logic for authentication, registration, and logout in the `AuthService` class.

### Authentication Logic

```csharp
public async Task<User> AuthenticateAsync(string email, string password)
{
    var user = _users.FirstOrDefault(u => u.Email == email && u.Password == password);
    return await Task.FromResult(user);
}
```

### Registration Logic

```csharp
public async Task<bool> RegisterAsync(User user)
{
    // Check if the email is already registered
    if (_users.Any(u => u.Email == user.Email))
    {
        return false; // Registration failed
    }

    _users.Add(user); // Add the new user
    return true; // Registration successful
}
```

### Logout Logic

```csharp
public async Task LogoutAsync()
{
    // Perform logout actions if any (not applicable in this simple example)
}
```

### Complete `AuthService` Class

```csharp
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;

public interface IAuthService
{
    Task<User> AuthenticateAsync(string email, string password);
    Task<bool> RegisterAsync(User user);
    Task LogoutAsync();
}

public class AuthService : IAuthService
{
    private readonly List<User> _users; // In a real application, use a database

    public AuthService()
    {
        // Initialize or inject users data
        _users = new List<User>
        {
            new User { Id = 1, Email = "admin@example.com", Password = "admin", Role = UserRole.Admin },
            new User { Id = 2, Email = "courier@example.com", Password = "courier", Role = UserRole.Courier },
            new User { Id = 3, Email = "vendor@example.com", Password = "vendor", Role = UserRole.Vendor },
            new User { Id = 4, Email = "customer@example.com", Password = "customer", Role = UserRole.Customer }
        };
    }

    public async Task<User> AuthenticateAsync(string email, string password)
    {
        var user = _users.FirstOrDefault(u => u.Email == email && u.Password == password);
        return await Task.FromResult(user);
    }

    public async Task<bool> RegisterAsync(User user)
    {
        // Check if the email is already registered
        if (_users.Any(u => u.Email == user.Email))
        {
            return false; // Registration failed
        }

        _users.Add(user); // Add the new user
        return true; // Registration successful
    }

    public async Task LogoutAsync()
    {
        // Perform logout actions if any (not applicable in this simple example)
    }
}
```

Ensure to inject `AuthService` into your controllers to use these authentication, registration, and logout methods.

This implementation provides a basic example of authentication, registration, and logout logic. Depending on your application requirements, you may need to enhance these methods with additional features such as password hashing, email verification, and database integration.



To implement role-based login, logout, and registration in ASP.NET Core 8, we'll create an application with four types of users: Admin, Courier, Vendor, and Customer. Each user type will have its own registration form and dashboard page. Here's how we can do it:

### 1. Models

Define a `User` model with properties for login credentials and role.

```csharp
public class User
{
    public int Id { get; set; }
    public string Email { get; set; }
    public string Password { get; set; }
    public UserRole Role { get; set; }
}

public enum UserRole
{
    Admin,
    Courier,
    Vendor,
    Customer
}
```

### 2. Authentication Service

Implement an authentication service to handle login, logout, and registration logic.

```csharp
public interface IAuthService
{
    Task<User> AuthenticateAsync(string email, string password);
    Task<bool> RegisterAsync(User user);
    Task LogoutAsync();
}

public class AuthService : IAuthService
{
    private readonly List<User> _users; // In a real application, use a database

    public AuthService()
    {
        _users = new List<User>(); // Initialize or inject users data
    }

    public async Task<User> AuthenticateAsync(string email, string password)
    {
        // Implement authentication logic
    }

    public async Task<bool> RegisterAsync(User user)
    {
        // Implement registration logic
    }

    public async Task LogoutAsync()
    {
        // Implement logout logic
    }
}
```

### 3. Controllers

Create separate controllers for each user type to handle login, logout, and registration actions.

```csharp
[Authorize(Roles = "Admin")]
public class AdminController : Controller { }

[Authorize(Roles = "Courier")]
public class CourierController : Controller { }

[Authorize(Roles = "Vendor")]
public class VendorController : Controller { }

[Authorize(Roles = "Customer")]
public class CustomerController : Controller { }
```

### 4. Views

Generate Razor views for login, logout, and registration actions in each controller.

### 5. Routing

Define routes for login, logout, and registration actions in `Startup.cs`.

```csharp
app.UseEndpoints(endpoints =>
{
    endpoints.MapControllerRoute(
        name: "admin",
        pattern: "admin/{controller=Home}/{action=Index}/{id?}",
        defaults: new { area = "", controller = "Admin", action = "Index" });

    // Define routes for other user types
});
```

### 6. Role-Based Authorization

Apply `[Authorize(Roles = "RoleName")]` attribute to restrict access to actions based on user roles.

### Summary

By following these steps, you can implement role-based login, logout, and registration functionality for four types of users in ASP.NET Core 8. Make sure to handle authentication securely and adjust the code according to your specific requirements.

*/

Sure, let's implement a simplified version of user authentication and authorization without using ASP.NET Core Identity. Below is a step-by-step guide to achieve this:

1. **User Model**: Create a user model with basic properties.

```csharp
public class User
{
    public int UserId { get; set; }
    public string FullName { get; set; }
    public string Email { get; set; }
    public string PasswordHash { get; set; }
    public UserType UserType { get; set; }
}

public enum UserType
{
    Admin = 1,
    Customer,
    Courier,
    Vendor
}
```

2. **Database Context**: Set up a database context to interact with your database.

```csharp
public class ApplicationDbContext : DbContext
{
    public DbSet<User> Users { get; set; }

    protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
    {
        optionsBuilder.UseSqlServer("your_connection_string_here");
    }
}
```

3. **Authentication Service**: Implement methods for user registration, login, and logout.

```csharp
public interface IAuthenticationService
{
    Task<User> RegisterUser(User user);
    Task<User> Login(string email, string password);
    Task Logout();
}

public class AuthenticationService : IAuthenticationService
{
    private readonly ApplicationDbContext _context;

    public AuthenticationService(ApplicationDbContext context)
    {
        _context = context;
    }

    public async Task<User> RegisterUser(User user)
    {
        // Hash the password before saving to the database
        user.PasswordHash = HashPassword(user.PasswordHash);
        
        _context.Users.Add(user);
        await _context.SaveChangesAsync();
        
        return user;
    }

    public async Task<User> Login(string email, string password)
    {
        // Retrieve user from the database by email
        var user = await _context.Users.FirstOrDefaultAsync(u => u.Email == email);
        
        // Verify password
        if (user != null && VerifyPassword(user.PasswordHash, password))
        {
            return user;
        }
        
        return null; // User not found or password incorrect
    }

    public async Task Logout()
    {
        // Implement logout functionality if needed
    }

    private string HashPassword(string password)
    {
        // Implement password hashing (e.g., using bcrypt, PBKDF2, etc.)
        // For simplicity, you can use a library like BCrypt.Net
        return BCrypt.Net.BCrypt.HashPassword(password);
    }

    private bool VerifyPassword(string hashedPassword, string password)
    {
        // Verify password against the hashed password
        return BCrypt.Net.BCrypt.Verify(password, hashedPassword);
    }
}
```

4. **Controller**: Create controller actions for registration, login, and logout.

```csharp
public class AccountController : ControllerBase
{
    private readonly IAuthenticationService _authService;

    public AccountController(IAuthenticationService authService)
    {
        _authService = authService;
    }

    [HttpPost]
    public async Task<IActionResult> Register(User user)
    {
        var existingUser = await _authService.RegisterUser(user);
        if (existingUser != null)
        {
            return Ok("User registered successfully.");
        }
        return BadRequest("Registration failed.");
    }

    [HttpPost]
    public async Task<IActionResult> Login(LoginModel model)
    {
        var user = await _authService.Login(model.Email, model.Password);
        if (user != null)
        {
            // Create and return a token or set authentication cookie
            return Ok("Login successful.");
        }
        return Unauthorized("Invalid email or password.");
    }

    [HttpPost]
    public async Task<IActionResult> Logout()
    {
        await _authService.Logout();
        return Ok("Logged out successfully.");
    }
}
```

5. **Authorization**: Implement authorization logic based on user roles as needed in your controllers or actions.

This implementation provides a simple custom authentication and authorization system without using ASP.NET Core Identity. Remember to handle password hashing securely and ensure proper error handling and validation throughout your application.



Certainly! Let's add authorization logic based on user roles to the controller actions.

First, let's assume you have different endpoints or actions that are accessible only to certain user roles. We'll use the `[Authorize]` attribute to enforce role-based access control.

Here's an updated version of the controller with authorization logic:

```csharp
public class AccountController : ControllerBase
{
    private readonly IAuthenticationService _authService;

    public AccountController(IAuthenticationService authService)
    {
        _authService = authService;
    }

    [HttpPost]
    public async Task<IActionResult> Register(User user)
    {
        // Only allow registration for Admin users
        if (!UserIsInRole(UserType.Admin))
        {
            return Forbid();
        }

        var existingUser = await _authService.RegisterUser(user);
        if (existingUser != null)
        {
            return Ok("User registered successfully.");
        }
        return BadRequest("Registration failed.");
    }

    [HttpPost]
    [AllowAnonymous] // Allow everyone to access login action
    public async Task<IActionResult> Login(LoginModel model)
    {
        var user = await _authService.Login(model.Email, model.Password);
        if (user != null)
        {
            return Ok("Login successful.");
        }
        return Unauthorized("Invalid email or password.");
    }

    [HttpPost]
    public async Task<IActionResult> Logout()
    {
        // Logout action is accessible to all authenticated users
        await _authService.Logout();
        return Ok("Logged out successfully.");
    }

    private bool UserIsInRole(UserType requiredRole)
    {
        // Here you can implement your logic to check if the current user has the required role
        // For simplicity, assuming all users are Admin for demo purpose
        // In a real-world scenario, you'd retrieve the user's role from the database
        // and check if it matches the required role
        return true; // Assuming all users are Admin
    }
}
```

In this example:

- The `Register` action is accessible only to users with the role `Admin`. If the current user is not an admin, the request will be forbidden (`403 Forbidden`).
- The `Login` action is allowed for everyone (`AllowAnonymous` attribute) since it's used for authentication.
- The `Logout` action is accessible to all authenticated users.

In a real-world scenario, you would replace the `UserIsInRole` method with logic that checks the current user's role from the database or any other source.

Remember to configure authentication and set up user roles properly in your application to ensure the authorization logic works as expected.


To implement user authentication, registration, and authorization using JWT (JSON Web Tokens) in ASP.NET Core, you'll need to follow these steps:

1. **Install Required Packages**: Install the necessary packages for JWT authentication.

2. **Configure JWT Authentication**: Set up JWT authentication in your ASP.NET Core application.

3. **Implement User Registration**: Create an endpoint for user registration.

4. **Implement User Login**: Create an endpoint for user login, which will issue JWT tokens upon successful authentication.

5. **Authorize Endpoints**: Secure your endpoints by adding JWT authentication and authorization checks.

Here's how you can achieve this:

```csharp
// Install required packages:
// Microsoft.AspNetCore.Authentication.JwtBearer
// Microsoft.IdentityModel.Tokens
```

1. **Configure JWT Authentication**:
```csharp
public void ConfigureServices(IServiceCollection services)
{
    // Other configurations...

    // JWT Authentication
    services.AddAuthentication(options =>
    {
        options.DefaultAuthenticateScheme = JwtBearerDefaults.AuthenticationScheme;
        options.DefaultChallengeScheme = JwtBearerDefaults.AuthenticationScheme;
    }).AddJwtBearer(options =>
    {
        options.TokenValidationParameters = new TokenValidationParameters
        {
            ValidateIssuer = true,
            ValidateAudience = true,
            ValidateLifetime = true,
            ValidateIssuerSigningKey = true,
            ValidIssuer = Configuration["Jwt:Issuer"],
            ValidAudience = Configuration["Jwt:Issuer"],
            IssuerSigningKey = new SymmetricSecurityKey(Encoding.UTF8.GetBytes(Configuration["Jwt:Key"]))
        };
    });

    // Other configurations...
}
```

2. **Implement User Registration**:
```csharp
[HttpPost("register")]
public async Task<IActionResult> Register(UserRegisterModel model)
{
    // Validate model
    if (!ModelState.IsValid)
    {
        return BadRequest(ModelState);
    }

    // Check if user already exists
    if (await _userService.UserExists(model.Email))
    {
        return Conflict("User already exists");
    }

    // Create new user
    var user = new User
    {
        FullName = model.FullName,
        Email = model.Email,
        Password = model.Password, // Password should be hashed before saving (not shown here)
        UserType = model.UserType
    };

    // Save user to database
    await _userService.Register(user);

    return Ok("User registered successfully");
}
```

3. **Implement User Login**:
```csharp
[HttpPost("login")]
public async Task<IActionResult> Login(UserLoginModel model)
{
    // Authenticate user
    var user = await _userService.Authenticate(model.Email, model.Password);

    if (user == null)
    {
        return Unauthorized("Invalid email or password");
    }

    // Generate JWT token
    var token = GenerateJwtToken(user);

    return Ok(new { Token = token });
}

private string GenerateJwtToken(User user)
{
    var tokenHandler = new JwtSecurityTokenHandler();
    var key = Encoding.ASCII.GetBytes(_configuration["Jwt:Secret"]);

    var tokenDescriptor = new SecurityTokenDescriptor
    {
        Subject = new ClaimsIdentity(new Claim[]
        {
            new Claim(ClaimTypes.NameIdentifier, user.UserId.ToString()),
            new Claim(ClaimTypes.Email, user.Email),
            new Claim(ClaimTypes.Role, user.UserType.ToString())
        }),
        Expires = DateTime.UtcNow.AddDays(7),
        SigningCredentials = new SigningCredentials(new SymmetricSecurityKey(key), SecurityAlgorithms.HmacSha256Signature)
    };

    var token = tokenHandler.CreateToken(tokenDescriptor);
    return tokenHandler.WriteToken(token);
}
```

4. **Authorize Endpoints**:
```csharp
[Authorize(Roles = "Admin")]
[HttpGet("admin-only")]
public IActionResult AdminOnly()
{
    // Endpoint accessible only to users with Admin role
    return Ok("Admin endpoint accessed");
}
```

These are simplified examples to demonstrate the process. You'll need to adapt them to fit your application's architecture and requirements, including proper error handling, password hashing, and user management.